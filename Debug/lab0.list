
lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003270  08003270  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003278  08003278  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000007c  080032fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080032fc  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008fe5  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000858c  00000000  00000000  00029091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001852  00000000  00000000  0003161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00032e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086f45  00000000  00000000  000335c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006a0  00000000  00000000  000ba510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000166da  00000000  00000000  000babb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d128a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002294  00000000  00000000  000d12dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003194 	.word	0x08003194

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08003194 	.word	0x08003194

080001d8 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001d8:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001dc:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001de:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001e2:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001e6:	f000 b99d 	b.w	8000524 <SVC_Handler_Main>

080001ea <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001ea:	bc80      	pop	{r7}
  	POP {R7}
 80001ec:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001ee:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001f2:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 80001fa:	f380 8809 	msr	PSP, r0
  	BX LR
 80001fe:	4770      	bx	lr

08000200 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000200:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 8000204:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000208:	f000 fb22 	bl	8000850 <osSched>
	MRS R0, PSP
 800020c:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000210:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 8000214:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000218:	f380 8809 	msr	PSP, r0
	BX LR
 800021c:	4770      	bx	lr
	...

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SVC_Handler_Main>:
uint8_t active_threads = 0;

static uint32_t* s_stackptr = 0;

void SVC_Handler_Main( unsigned int *svc_args )
	{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
		unsigned int svc_number;
		uint32_t min_deadline = UINT32_MAX;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	617b      	str	r3, [r7, #20]
		/*
		* Stack contains:
		* r0, r1, r2, r3, r12, r14, the return address and xPSR
		* First argument (r0) is svc_args[0]
		*/
		svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ] ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3318      	adds	r3, #24
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3b02      	subs	r3, #2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]
		switch( svc_number )
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d852      	bhi.n	80005ea <SVC_Handler_Main+0xc6>
 8000544:	a201      	add	r2, pc, #4	; (adr r2, 800054c <SVC_Handler_Main+0x28>)
 8000546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054a:	bf00      	nop
 800054c:	0800055d 	.word	0x0800055d
 8000550:	08000565 	.word	0x08000565
 8000554:	0800056d 	.word	0x0800056d
 8000558:	080005d9 	.word	0x080005d9
		{
		case 0:
			printf("Success!\r\n");
 800055c:	4825      	ldr	r0, [pc, #148]	; (80005f4 <SVC_Handler_Main+0xd0>)
 800055e:	f002 f989 	bl	8002874 <puts>
			break;
 8000562:	e043      	b.n	80005ec <SVC_Handler_Main+0xc8>
		case 1:
			printf("Something else!\r\n");
 8000564:	4824      	ldr	r0, [pc, #144]	; (80005f8 <SVC_Handler_Main+0xd4>)
 8000566:	f002 f985 	bl	8002874 <puts>
			break;
 800056a:	e03f      	b.n	80005ec <SVC_Handler_Main+0xc8>
		case RUN_FIRST_THREAD:
			for (uint8_t i = 0; i < active_threads; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	74fb      	strb	r3, [r7, #19]
 8000570:	e01b      	b.n	80005aa <SVC_Handler_Main+0x86>
				if (threads[i].current_deadline < min_deadline) {
 8000572:	7cfa      	ldrb	r2, [r7, #19]
 8000574:	4921      	ldr	r1, [pc, #132]	; (80005fc <SVC_Handler_Main+0xd8>)
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	440b      	add	r3, r1
 8000580:	330c      	adds	r3, #12
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	429a      	cmp	r2, r3
 8000588:	d90c      	bls.n	80005a4 <SVC_Handler_Main+0x80>
					min_deadline = threads[i].current_deadline;
 800058a:	7cfa      	ldrb	r2, [r7, #19]
 800058c:	491b      	ldr	r1, [pc, #108]	; (80005fc <SVC_Handler_Main+0xd8>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	330c      	adds	r3, #12
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	617b      	str	r3, [r7, #20]
					current_thread = i;
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <SVC_Handler_Main+0xdc>)
 80005a0:	7cfb      	ldrb	r3, [r7, #19]
 80005a2:	7013      	strb	r3, [r2, #0]
			for (uint8_t i = 0; i < active_threads; i++) {
 80005a4:	7cfb      	ldrb	r3, [r7, #19]
 80005a6:	3301      	adds	r3, #1
 80005a8:	74fb      	strb	r3, [r7, #19]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <SVC_Handler_Main+0xe0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	7cfa      	ldrb	r2, [r7, #19]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d3de      	bcc.n	8000572 <SVC_Handler_Main+0x4e>
				}
			}
			__set_PSP((uint32_t)threads[current_thread].sp);
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <SVC_Handler_Main+0xdc>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <SVC_Handler_Main+0xd8>)
 80005bc:	460b      	mov	r3, r1
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	440b      	add	r3, r1
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f383 8809 	msr	PSP, r3
}
 80005d0:	bf00      	nop
			runFirstThread();
 80005d2:	f7ff fe0a 	bl	80001ea <runFirstThread>
			break;
 80005d6:	e009      	b.n	80005ec <SVC_Handler_Main+0xc8>
		case YIELD:
			// Pend an interrupt to do the context switch
			_ICSR |= 1<<28;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SVC_Handler_Main+0xe4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <SVC_Handler_Main+0xe4>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6013      	str	r3, [r2, #0]
			__asm("isb");
 80005e4:	f3bf 8f6f 	isb	sy
			break;
 80005e8:	e000      	b.n	80005ec <SVC_Handler_Main+0xc8>
		default: /* unknown SVC */
			break;
 80005ea:	bf00      	nop
	}
}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	080031ac 	.word	0x080031ac
 80005f8:	080031b8 	.word	0x080031b8
 80005fc:	20000098 	.word	0x20000098
 8000600:	20000200 	.word	0x20000200
 8000604:	20000201 	.word	0x20000201
 8000608:	e000ed04 	.word	0xe000ed04

0800060c <init_new_thread_stack>:

static bool init_new_thread_stack(uint32_t thread_function, void* args, uint32_t deadline, uint32_t period) {
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]
	// Subtract one because the idle task is the last thread
	if(active_threads >= MAX_STACKS-1) {
 800061a:	4b4e      	ldr	r3, [pc, #312]	; (8000754 <init_new_thread_stack+0x148>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0d      	cmp	r3, #13
 8000620:	d901      	bls.n	8000626 <init_new_thread_stack+0x1a>
		return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e090      	b.n	8000748 <init_new_thread_stack+0x13c>
	}
	uint32_t* new_stackptr = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
	// MSP_INIT_VAL - 0x200 * number of stacks already created
	new_stackptr = *(uint32_t**)0x0 - (0x200 * (active_threads+1));
 800062a:	2300      	movs	r3, #0
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b49      	ldr	r3, [pc, #292]	; (8000754 <init_new_thread_stack+0x148>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	02db      	lsls	r3, r3, #11
 8000636:	425b      	negs	r3, r3
 8000638:	4413      	add	r3, r2
 800063a:	61fb      	str	r3, [r7, #28]

	*(--new_stackptr) = 1 << 24;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3b04      	subs	r3, #4
 8000640:	61fb      	str	r3, [r7, #28]
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000648:	601a      	str	r2, [r3, #0]
	*(--new_stackptr) = (uint32_t)thread_function;
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3b04      	subs	r3, #4
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	e008      	b.n	800066e <init_new_thread_stack+0x62>
	  *(--new_stackptr) = 0x0A;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3b04      	subs	r3, #4
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	220a      	movs	r2, #10
 8000666:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3301      	adds	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	2b04      	cmp	r3, #4
 8000672:	ddf3      	ble.n	800065c <init_new_thread_stack+0x50>
	}
	*(--new_stackptr) = (uint32_t)args; // R0
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3b04      	subs	r3, #4
 8000678:	61fb      	str	r3, [r7, #28]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e008      	b.n	8000698 <init_new_thread_stack+0x8c>
	  *(--new_stackptr) = 0x0A;
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b04      	subs	r3, #4
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	220a      	movs	r2, #10
 8000690:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b07      	cmp	r3, #7
 800069c:	ddf3      	ble.n	8000686 <init_new_thread_stack+0x7a>
	}
	s_stackptr = new_stackptr;
 800069e:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <init_new_thread_stack+0x14c>)
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	6013      	str	r3, [r2, #0]

	// Store SP and thread function in correct location
	threads[active_threads].sp = new_stackptr;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <init_new_thread_stack+0x148>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4a2c      	ldr	r2, [pc, #176]	; (800075c <init_new_thread_stack+0x150>)
 80006ac:	460b      	mov	r3, r1
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	440b      	add	r3, r1
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4413      	add	r3, r2
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	601a      	str	r2, [r3, #0]
	threads[active_threads].thread_function = (void *)thread_function;
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <init_new_thread_stack+0x148>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	4926      	ldr	r1, [pc, #152]	; (800075c <init_new_thread_stack+0x150>)
 80006c4:	4603      	mov	r3, r0
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4403      	add	r3, r0
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	440b      	add	r3, r1
 80006ce:	3304      	adds	r3, #4
 80006d0:	601a      	str	r2, [r3, #0]
	threads[active_threads].deadline = deadline;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <init_new_thread_stack+0x148>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <init_new_thread_stack+0x150>)
 80006da:	460b      	mov	r3, r1
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	440b      	add	r3, r1
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	3308      	adds	r3, #8
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
	threads[active_threads].current_deadline = deadline;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <init_new_thread_stack+0x148>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <init_new_thread_stack+0x150>)
 80006f2:	460b      	mov	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	440b      	add	r3, r1
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	4413      	add	r3, r2
 80006fc:	330c      	adds	r3, #12
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
	threads[active_threads].period = period;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <init_new_thread_stack+0x148>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <init_new_thread_stack+0x150>)
 800070a:	460b      	mov	r3, r1
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	440b      	add	r3, r1
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4413      	add	r3, r2
 8000714:	3310      	adds	r3, #16
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	601a      	str	r2, [r3, #0]
	threads[active_threads].ready = true;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <init_new_thread_stack+0x148>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <init_new_thread_stack+0x150>)
 8000722:	460b      	mov	r3, r1
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	440b      	add	r3, r1
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	4413      	add	r3, r2
 800072c:	3314      	adds	r3, #20
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
	current_thread = active_threads;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <init_new_thread_stack+0x148>)
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <init_new_thread_stack+0x154>)
 8000738:	701a      	strb	r2, [r3, #0]
	active_threads++;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <init_new_thread_stack+0x148>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <init_new_thread_stack+0x148>)
 8000744:	701a      	strb	r2, [r3, #0]
	return true;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000201 	.word	0x20000201
 8000758:	20000204 	.word	0x20000204
 800075c:	20000098 	.word	0x20000098
 8000760:	20000200 	.word	0x20000200

08000764 <osCreateThread>:

bool osCreateThread(uint32_t thread_function, void* args, uint32_t deadline, uint32_t period) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	603b      	str	r3, [r7, #0]
	if(!init_new_thread_stack(thread_function, args, deadline, period)) {
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff ff47 	bl	800060c <init_new_thread_stack>
 800077e:	4603      	mov	r3, r0
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <osCreateThread+0x2a>
		return false;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <osCreateThread+0x2c>
	}
	return true;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <osKernelInitialize>:

void osKernelInitialize(uint32_t idle_task) {
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint32_t* idle_stackptr = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	idle_stackptr = *(uint32_t**)0x0 - (0x200 * (IDLE_TASK+1));
 80007a4:	2300      	movs	r3, #0
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 80007ac:	60fb      	str	r3, [r7, #12]
	*(--idle_stackptr) = 1 << 24;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3b04      	subs	r3, #4
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ba:	601a      	str	r2, [r3, #0]
	*(--idle_stackptr) = (uint32_t) idle_task;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3b04      	subs	r3, #4
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	601a      	str	r2, [r3, #0]
	idle_stackptr -= 14;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3b38      	subs	r3, #56	; 0x38
 80007cc:	60fb      	str	r3, [r7, #12]

	threads[IDLE_TASK].sp = idle_stackptr;
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <osKernelInitialize+0x88>)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	threads[IDLE_TASK].thread_function = (void *) idle_task;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	; (8000820 <osKernelInitialize+0x88>)
 80007da:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	threads[IDLE_TASK].deadline = UINT32_MAX;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <osKernelInitialize+0x88>)
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	threads[IDLE_TASK].current_deadline = UINT32_MAX;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <osKernelInitialize+0x88>)
 80007ea:	f04f 32ff 	mov.w	r2, #4294967295
 80007ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	threads[IDLE_TASK].period = UINT32_MAX;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <osKernelInitialize+0x88>)
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

	// Set the priority of PendSV to almost the weakest
	SHPR3 |= 0xFE << 16; // Shift the constant 0xFE 16 bits to set PendSV priority
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <osKernelInitialize+0x8c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a08      	ldr	r2, [pc, #32]	; (8000824 <osKernelInitialize+0x8c>)
 8000802:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 8000806:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; // Set the priority of SVC higher than PendSV
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <osKernelInitialize+0x90>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <osKernelInitialize+0x90>)
 800080e:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 8000812:	6013      	str	r3, [r2, #0]
	return;
 8000814:	bf00      	nop
}
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	20000098 	.word	0x20000098
 8000824:	e000ed20 	.word	0xe000ed20
 8000828:	e000ed1c 	.word	0xe000ed1c

0800082c <osKernelStart>:

bool osKernelStart(void) {
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	// Must have one thread created
	if(active_threads == 0) {
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <osKernelStart+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <osKernelStart+0x10>
		return false;
 8000838:	2300      	movs	r3, #0
 800083a:	e001      	b.n	8000840 <osKernelStart+0x14>
	}
	__asm("SVC #2");
 800083c:	df02      	svc	2
	return true;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000201 	.word	0x20000201

08000850 <osSched>:

// This function must set PSP, this is how it picks the next thread,
// essentially the return value.
void osSched(void) {
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
	uint32_t min_deadline = UINT32_MAX;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800085c:	f3ef 8309 	mrs	r3, PSP
 8000860:	60fb      	str	r3, [r7, #12]
  return(result);
 8000862:	68fb      	ldr	r3, [r7, #12]
	threads[current_thread].sp = (uint32_t*)(__get_PSP() - 8*4);
 8000864:	f1a3 0220 	sub.w	r2, r3, #32
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <osSched+0xdc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	4610      	mov	r0, r2
 8000870:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <osSched+0xe0>)
 8000872:	460b      	mov	r3, r1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	440b      	add	r3, r1
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4413      	add	r3, r2
 800087c:	6018      	str	r0, [r3, #0]

	bool scheduled = false;
 800087e:	2300      	movs	r3, #0
 8000880:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i = 0; i < active_threads; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	74bb      	strb	r3, [r7, #18]
 8000886:	e028      	b.n	80008da <osSched+0x8a>
		if (threads[i].current_deadline < min_deadline) {
 8000888:	7cba      	ldrb	r2, [r7, #18]
 800088a:	4929      	ldr	r1, [pc, #164]	; (8000930 <osSched+0xe0>)
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	440b      	add	r3, r1
 8000896:	330c      	adds	r3, #12
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	429a      	cmp	r2, r3
 800089e:	d919      	bls.n	80008d4 <osSched+0x84>
			if (threads[i].ready) {
 80008a0:	7cba      	ldrb	r2, [r7, #18]
 80008a2:	4923      	ldr	r1, [pc, #140]	; (8000930 <osSched+0xe0>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	3314      	adds	r3, #20
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00e      	beq.n	80008d4 <osSched+0x84>
				min_deadline = threads[i].current_deadline;
 80008b6:	7cba      	ldrb	r2, [r7, #18]
 80008b8:	491d      	ldr	r1, [pc, #116]	; (8000930 <osSched+0xe0>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	330c      	adds	r3, #12
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	617b      	str	r3, [r7, #20]
				current_thread = i;
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <osSched+0xdc>)
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	7013      	strb	r3, [r2, #0]
				scheduled = true;
 80008d0:	2301      	movs	r3, #1
 80008d2:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i = 0; i < active_threads; i++) {
 80008d4:	7cbb      	ldrb	r3, [r7, #18]
 80008d6:	3301      	adds	r3, #1
 80008d8:	74bb      	strb	r3, [r7, #18]
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <osSched+0xe4>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	7cba      	ldrb	r2, [r7, #18]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d3d1      	bcc.n	8000888 <osSched+0x38>
			}
		}
	}

	if (scheduled) {
 80008e4:	7cfb      	ldrb	r3, [r7, #19]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00e      	beq.n	8000908 <osSched+0xb8>
		__set_PSP((uint32_t)threads[current_thread].sp);
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <osSched+0xdc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <osSched+0xe0>)
 80008f2:	460b      	mov	r3, r1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	440b      	add	r3, r1
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	f383 8809 	msr	PSP, r3
}
 8000906:	e00a      	b.n	800091e <osSched+0xce>
	} else {
		current_thread = IDLE_TASK;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <osSched+0xdc>)
 800090a:	220e      	movs	r2, #14
 800090c:	701a      	strb	r2, [r3, #0]
		__set_PSP((uint32_t)threads[IDLE_TASK].sp);
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <osSched+0xe0>)
 8000910:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000914:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f383 8809 	msr	PSP, r3
}
 800091c:	bf00      	nop
	}
	return;
 800091e:	bf00      	nop
}
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000200 	.word	0x20000200
 8000930:	20000098 	.word	0x20000098
 8000934:	20000201 	.word	0x20000201

08000938 <osYield>:

void osYield(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	threads[current_thread].ready = false;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <osYield+0x28>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <osYield+0x2c>)
 8000944:	460b      	mov	r3, r1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	440b      	add	r3, r1
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4413      	add	r3, r2
 800094e:	3314      	adds	r3, #20
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
	__asm("SVC #3");
 8000954:	df03      	svc	3
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20000200 	.word	0x20000200
 8000964:	20000098 	.word	0x20000098

08000968 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000970:	1d39      	adds	r1, r7, #4
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	2201      	movs	r2, #1
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <__io_putchar+0x20>)
 800097a:	f001 fb66 	bl	800204a <HAL_UART_Transmit>
	return ch;
 800097e:	687b      	ldr	r3, [r7, #4]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000208 	.word	0x20000208

0800098c <print_omg>:
		printf("Hello, PC! IM ALIVE %X\r\n", arg);
		osYield();
	}
}

static void print_omg(void* args) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
//	test1* test_struct = (test1*)args;
	while(1) {
//		printf("OMG! %X\r\n", test_struct->one);
//		printf("OMG! %X\r\n", test_struct->two);
		osYield();
 8000994:	f7ff ffd0 	bl	8000938 <osYield>
 8000998:	e7fc      	b.n	8000994 <print_omg+0x8>
	...

0800099c <print_nothing>:
	}
}

static void print_nothing(void* args) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	while(1) {
		for (int i = 0; i < 1000000; i++) {}
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e002      	b.n	80009b0 <print_nothing+0x14>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4a03      	ldr	r2, [pc, #12]	; (80009c0 <print_nothing+0x24>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	ddf8      	ble.n	80009aa <print_nothing+0xe>
		osYield();
 80009b8:	f7ff ffbe 	bl	8000938 <osYield>
		for (int i = 0; i < 1000000; i++) {}
 80009bc:	e7f2      	b.n	80009a4 <print_nothing+0x8>
 80009be:	bf00      	nop
 80009c0:	000f423f 	.word	0x000f423f

080009c4 <idle_task>:
	}
}

static void idle_task(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	while (1) {
		printf("Idling...\r\n");
 80009c8:	4801      	ldr	r0, [pc, #4]	; (80009d0 <idle_task+0xc>)
 80009ca:	f001 ff53 	bl	8002874 <puts>
 80009ce:	e7fb      	b.n	80009c8 <idle_task+0x4>
 80009d0:	080031e8 	.word	0x080031e8

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d8:	f000 fb5c 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f820 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f000 f8b2 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 f886 	bl	8000af4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  osKernelInitialize(idle_task);
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <main+0x3c>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fed4 	bl	8000798 <osKernelInitialize>
//  osCreateThread((uint32_t)print_wow, args, 8, 10);
  osCreateThread((uint32_t)print_nothing, &var, 10, 15);
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <main+0x40>)
 80009f2:	230f      	movs	r3, #15
 80009f4:	220a      	movs	r2, #10
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <main+0x44>)
 80009f8:	f7ff feb4 	bl	8000764 <osCreateThread>
  osCreateThread((uint32_t)print_omg, &var, 1, 4);
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0x48>)
 80009fe:	2304      	movs	r3, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	4905      	ldr	r1, [pc, #20]	; (8000a18 <main+0x44>)
 8000a04:	f7ff feae 	bl	8000764 <osCreateThread>
  osKernelStart();
 8000a08:	f7ff ff10 	bl	800082c <osKernelStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x38>
 8000a0e:	bf00      	nop
 8000a10:	080009c5 	.word	0x080009c5
 8000a14:	0800099d 	.word	0x0800099d
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	0800098d 	.word	0x0800098d

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 feaa 	bl	8002788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2310      	movs	r3, #16
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a90:	2310      	movs	r3, #16
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fdea 	bl	8001680 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f8b7 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f84c 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ade:	f000 f8a1 	bl	8000c24 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f001 fa40 	bl	8001fb0 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f875 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000208 	.word	0x20000208
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bd4:	f000 fd3a 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_GPIO_Init+0xd8>)
 8000bf0:	f000 fba8 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000c0c:	f000 fb9a 	bl	8001344 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f000 fb34 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12b      	bne.n	8000cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cea:	2307      	movs	r3, #7
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0x8c>)
 8000cf6:	f000 fb25 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d42:	f000 f9f9 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  global_time++;
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <SysTick_Handler+0x180>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a5b      	ldr	r2, [pc, #364]	; (8000ebc <SysTick_Handler+0x180>)
 8000d4e:	6013      	str	r3, [r2, #0]

  // Check if global time hits the scheduler period (LCM)
  if (global_time >= sched_period) {
 8000d50:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <SysTick_Handler+0x180>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <SysTick_Handler+0x184>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d31f      	bcc.n	8000d9c <SysTick_Handler+0x60>
	  global_time = 0;
 8000d5c:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <SysTick_Handler+0x180>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < active_threads; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	e014      	b.n	8000d92 <SysTick_Handler+0x56>
		  threads[i].current_deadline = threads[i].deadline;
 8000d68:	79f9      	ldrb	r1, [r7, #7]
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	4855      	ldr	r0, [pc, #340]	; (8000ec4 <SysTick_Handler+0x188>)
 8000d6e:	460b      	mov	r3, r1
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	440b      	add	r3, r1
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4403      	add	r3, r0
 8000d78:	3308      	adds	r3, #8
 8000d7a:	6819      	ldr	r1, [r3, #0]
 8000d7c:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <SysTick_Handler+0x188>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4403      	add	r3, r0
 8000d88:	330c      	adds	r3, #12
 8000d8a:	6019      	str	r1, [r3, #0]
	  for (uint8_t i = 0; i < active_threads; i++) {
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <SysTick_Handler+0x18c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	79fa      	ldrb	r2, [r7, #7]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3e5      	bcc.n	8000d68 <SysTick_Handler+0x2c>
	  }
  }

  bool interrupt_thread = false;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71bb      	strb	r3, [r7, #6]
  for (uint32_t i = 0; i < active_threads; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	e052      	b.n	8000e4c <SysTick_Handler+0x110>
	  // Check if a thread's period has been reached
	  if (global_time % threads[i].period == 0) {
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <SysTick_Handler+0x180>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4846      	ldr	r0, [pc, #280]	; (8000ec4 <SysTick_Handler+0x188>)
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	460b      	mov	r3, r1
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	440b      	add	r3, r1
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4403      	add	r3, r0
 8000db8:	3310      	adds	r3, #16
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8000dc0:	fb01 f303 	mul.w	r3, r1, r3
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d13d      	bne.n	8000e46 <SysTick_Handler+0x10a>
		  // Set the new deadline and put the thread into a READY state
		  threads[i].current_deadline += threads[i].period;
 8000dca:	493e      	ldr	r1, [pc, #248]	; (8000ec4 <SysTick_Handler+0x188>)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	330c      	adds	r3, #12
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4839      	ldr	r0, [pc, #228]	; (8000ec4 <SysTick_Handler+0x188>)
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4403      	add	r3, r0
 8000dea:	3310      	adds	r3, #16
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4419      	add	r1, r3
 8000df0:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <SysTick_Handler+0x188>)
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4403      	add	r3, r0
 8000dfe:	330c      	adds	r3, #12
 8000e00:	6019      	str	r1, [r3, #0]
		  threads[i].ready = true;
 8000e02:	4930      	ldr	r1, [pc, #192]	; (8000ec4 <SysTick_Handler+0x188>)
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3314      	adds	r3, #20
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
		  // Interruption is needed if the new deadline is less than the one we are currently servicing
		  if (threads[i].current_deadline < threads[current_thread].current_deadline) {
 8000e16:	492b      	ldr	r1, [pc, #172]	; (8000ec4 <SysTick_Handler+0x188>)
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	330c      	adds	r3, #12
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <SysTick_Handler+0x190>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	4925      	ldr	r1, [pc, #148]	; (8000ec4 <SysTick_Handler+0x188>)
 8000e30:	4603      	mov	r3, r0
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4403      	add	r3, r0
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	440b      	add	r3, r1
 8000e3a:	330c      	adds	r3, #12
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d201      	bcs.n	8000e46 <SysTick_Handler+0x10a>
			  interrupt_thread = true;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71bb      	strb	r3, [r7, #6]
  for (uint32_t i = 0; i < active_threads; i++) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SysTick_Handler+0x18c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d3a6      	bcc.n	8000da6 <SysTick_Handler+0x6a>
		  }
	  }
  }

  // Pend an interrupt to context switch if we need to
  if (interrupt_thread) {
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <SysTick_Handler+0x132>
	_ICSR |= 1<<28;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <SysTick_Handler+0x194>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <SysTick_Handler+0x194>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6013      	str	r3, [r2, #0]
	__asm("isb");
 8000e6a:	f3bf 8f6f 	isb	sy
  }

  // If this case is hit things are broken (Deadline missed, should not happen)
  if(threads[current_thread].current_deadline <= global_time) {
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <SysTick_Handler+0x190>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <SysTick_Handler+0x188>)
 8000e76:	460b      	mov	r3, r1
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	440b      	add	r3, r1
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	330c      	adds	r3, #12
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <SysTick_Handler+0x180>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d813      	bhi.n	8000eb4 <SysTick_Handler+0x178>
	 threads[current_thread].ready = false;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <SysTick_Handler+0x190>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <SysTick_Handler+0x188>)
 8000e94:	460b      	mov	r3, r1
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	440b      	add	r3, r1
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3314      	adds	r3, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	// Pend an interrupt to do the context switch
	_ICSR |= 1<<28;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SysTick_Handler+0x194>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <SysTick_Handler+0x194>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6013      	str	r3, [r2, #0]
	__asm("isb");
 8000eb0:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000024c 	.word	0x2000024c
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000098 	.word	0x20000098
 8000ec8:	20000201 	.word	0x20000201
 8000ecc:	20000200 	.word	0x20000200
 8000ed0:	e000ed04 	.word	0xe000ed04

08000ed4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e00a      	b.n	8000efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee6:	f3af 8000 	nop.w
 8000eea:	4601      	mov	r1, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	b2ca      	uxtb	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbf0      	blt.n	8000ee6 <_read+0x12>
  }

  return len;
 8000f04:	687b      	ldr	r3, [r7, #4]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e009      	b.n	8000f34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd1d 	bl	8000968 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf1      	blt.n	8000f20 <_write+0x12>
  }
  return len;
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_close>:

int _close(int file)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_isatty>:

int _isatty(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f001 fba8 	bl	8002734 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20020000 	.word	0x20020000
 8001010:	00000400 	.word	0x00000400
 8001014:	20000250 	.word	0x20000250
 8001018:	20000268 	.word	0x20000268

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f001 fb67 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fcaf 	bl	80009d4 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001084:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8001088:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800108c:	20000268 	.word	0x20000268

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f90d 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fdb2 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f917 	bl	800132a <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f8ed 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000000c 	.word	0x2000000c
 8001130:	20000014 	.word	0x20000014
 8001134:	20000010 	.word	0x20000010

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000014 	.word	0x20000014
 800115c:	20000254 	.word	0x20000254

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000254 	.word	0x20000254

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5c 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e159      	b.n	8001614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8148 	bne.w	800160e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80a2 	beq.w	800160e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x202>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1fe>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_GPIO_Init+0x2f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1fa>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1f6>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a45      	ldr	r2, [pc, #276]	; (8001644 <HAL_GPIO_Init+0x300>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1f2>
 8001532:	2304      	movs	r3, #4
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001536:	2307      	movs	r3, #7
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x304>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x304>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f aea2 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e267      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d075      	beq.n	800178a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e242      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x74>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6f      	ldr	r2, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a68      	ldr	r2, [pc, #416]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fd12 	bl	8001160 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fd0e 	bl	8001160 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e207      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fcfe 	bl	8001160 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcfa 	bl	8001160 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f3      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0xe8>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c7      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x244>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fcb3 	bl	8001160 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fcaf 	bl	8001160 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a8      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x244>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc92 	bl	8001160 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc8e 	bl	8001160 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e187      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d036      	beq.n	80018d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x248>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fc72 	bl	8001160 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc6e 	bl	8001160 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e167      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x200>
 800189e:	e01b      	b.n	80018d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x248>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fc5b 	bl	8001160 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e00e      	b.n	80018cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fc57 	bl	8001160 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d907      	bls.n	80018cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e150      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	42470000 	.word	0x42470000
 80018c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ea      	bne.n	80018ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8097 	beq.w	8001a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ea:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a73      	ldr	r2, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff fc17 	bl	8001160 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff fc13 	bl	8001160 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e10c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x474>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x2ea>
 800195c:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x30c>
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fbd8 	bl	8001160 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fbd4 	bl	8001160 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0cb      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ee      	beq.n	80019b4 <HAL_RCC_OscConfig+0x334>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fbc2 	bl	8001160 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff fbbe 	bl	8001160 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0b5      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a1 	beq.w	8001b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d05c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d141      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb92 	bl	8001160 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fb8e 	bl	8001160 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e087      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	491b      	ldr	r1, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb67 	bl	8001160 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb63 	bl	8001160 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e05c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x416>
 8001ab4:	e054      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb50 	bl	8001160 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb4c 	bl	8001160 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e045      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
 8001ae2:	e03d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e038      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d028      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d121      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11a      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d111      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cc      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d90c      	bls.n	8001bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d044      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e067      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4934      	ldr	r1, [pc, #208]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff fa7e 	bl	8001160 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff fa7a 	bl	8001160 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d20c      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9de 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	080031f4 	.word	0x080031f4
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000010 	.word	0x20000010

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d40:	b094      	sub	sp, #80	; 0x50
 8001d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x40>
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	f200 80e1 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d6e:	e0db      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d74:	e0db      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d7a:	e0d8      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d86:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
 8001daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	6139      	str	r1, [r7, #16]
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de0:	4659      	mov	r1, fp
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	4651      	mov	r1, sl
 8001de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dea:	4651      	mov	r1, sl
 8001dec:	018a      	lsls	r2, r1, #6
 8001dee:	4651      	mov	r1, sl
 8001df0:	ebb2 0801 	subs.w	r8, r2, r1
 8001df4:	4659      	mov	r1, fp
 8001df6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	eb18 0303 	adds.w	r3, r8, r3
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	eb49 0303 	adc.w	r3, r9, r3
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	024b      	lsls	r3, r1, #9
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e38:	4621      	mov	r1, r4
 8001e3a:	024a      	lsls	r2, r1, #9
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e42:	2200      	movs	r2, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e4c:	f7fe f9e8 	bl	8000220 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e58:	e058      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	2200      	movs	r2, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	4611      	mov	r1, r2
 8001e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e74:	4642      	mov	r2, r8
 8001e76:	464b      	mov	r3, r9
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	0159      	lsls	r1, r3, #5
 8001e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e86:	0150      	lsls	r0, r2, #5
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e92:	4649      	mov	r1, r9
 8001e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eac:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	00eb      	lsls	r3, r5, #3
 8001ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec2:	00e2      	lsls	r2, r4, #3
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	464b      	mov	r3, r9
 8001ed0:	eb45 0303 	adc.w	r3, r5, r3
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	028b      	lsls	r3, r1, #10
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eec:	4621      	mov	r1, r4
 8001eee:	028a      	lsls	r2, r1, #10
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	61fa      	str	r2, [r7, #28]
 8001efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f00:	f7fe f98e 	bl	8000220 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3750      	adds	r7, #80	; 0x50
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000000c 	.word	0x2000000c

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f64:	f7ff fff0 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	08003204 	.word	0x08003204

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	f7ff ffdc 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0b5b      	lsrs	r3, r3, #13
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08003204 	.word	0x08003204

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e03f      	b.n	8002042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fe52 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f929 	bl	800224c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	; 0x28
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d17c      	bne.n	8002164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_Transmit+0x2c>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e075      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit+0x3e>
 8002084:	2302      	movs	r3, #2
 8002086:	e06e      	b.n	8002166 <HAL_UART_Transmit+0x11c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209e:	f7ff f85f 	bl	8001160 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Transmit+0x82>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020dc:	e02a      	b.n	8002134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f840 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e036      	b.n	8002166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3302      	adds	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e007      	b.n	8002126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cf      	bne.n	80020de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f810 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b090      	sub	sp, #64	; 0x40
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217e:	e050      	b.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d04c      	beq.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <UART_WaitOnFlagUntilTimeout+0x30>
 800218e:	f7fe ffe7 	bl	8001160 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800219a:	429a      	cmp	r2, r3
 800219c:	d241      	bcs.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021be:	637a      	str	r2, [r7, #52]	; 0x34
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e5      	bne.n	800219e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	e853 3f00 	ldrex	r3, [r3]
 80021e0:	613b      	str	r3, [r7, #16]
   return(result);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f2:	623a      	str	r2, [r7, #32]
 80021f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f6:	69f9      	ldr	r1, [r7, #28]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	e841 2300 	strex	r3, r2, [r1]
 80021fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e5      	bne.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e00f      	b.n	8002242 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	429a      	cmp	r2, r3
 800223e:	d09f      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3740      	adds	r7, #64	; 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002250:	b0c0      	sub	sp, #256	; 0x100
 8002252:	af00      	add	r7, sp, #0
 8002254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	ea40 0301 	orr.w	r3, r0, r1
 8002274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	431a      	orrs	r2, r3
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	431a      	orrs	r2, r3
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022a4:	f021 010c 	bic.w	r1, r1, #12
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022b2:	430b      	orrs	r3, r1
 80022b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	6999      	ldr	r1, [r3, #24]
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	ea40 0301 	orr.w	r3, r0, r1
 80022d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <UART_SetConfig+0x2cc>)
 80022dc:	429a      	cmp	r2, r3
 80022de:	d005      	beq.n	80022ec <UART_SetConfig+0xa0>
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b8d      	ldr	r3, [pc, #564]	; (800251c <UART_SetConfig+0x2d0>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d104      	bne.n	80022f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ec:	f7ff fe4c 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 80022f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022f4:	e003      	b.n	80022fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022f6:	f7ff fe33 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 80022fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002308:	f040 810c 	bne.w	8002524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800230c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002310:	2200      	movs	r2, #0
 8002312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800231a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800231e:	4622      	mov	r2, r4
 8002320:	462b      	mov	r3, r5
 8002322:	1891      	adds	r1, r2, r2
 8002324:	65b9      	str	r1, [r7, #88]	; 0x58
 8002326:	415b      	adcs	r3, r3
 8002328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800232a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800232e:	4621      	mov	r1, r4
 8002330:	eb12 0801 	adds.w	r8, r2, r1
 8002334:	4629      	mov	r1, r5
 8002336:	eb43 0901 	adc.w	r9, r3, r1
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800234e:	4690      	mov	r8, r2
 8002350:	4699      	mov	r9, r3
 8002352:	4623      	mov	r3, r4
 8002354:	eb18 0303 	adds.w	r3, r8, r3
 8002358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800235c:	462b      	mov	r3, r5
 800235e:	eb49 0303 	adc.w	r3, r9, r3
 8002362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800237a:	460b      	mov	r3, r1
 800237c:	18db      	adds	r3, r3, r3
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
 8002380:	4613      	mov	r3, r2
 8002382:	eb42 0303 	adc.w	r3, r2, r3
 8002386:	657b      	str	r3, [r7, #84]	; 0x54
 8002388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800238c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002390:	f7fd ff46 	bl	8000220 <__aeabi_uldivmod>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <UART_SetConfig+0x2d4>)
 800239a:	fba3 2302 	umull	r2, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	011c      	lsls	r4, r3, #4
 80023a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80023bc:	415b      	adcs	r3, r3
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023c4:	4641      	mov	r1, r8
 80023c6:	eb12 0a01 	adds.w	sl, r2, r1
 80023ca:	4649      	mov	r1, r9
 80023cc:	eb43 0b01 	adc.w	fp, r3, r1
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e4:	4692      	mov	sl, r2
 80023e6:	469b      	mov	fp, r3
 80023e8:	4643      	mov	r3, r8
 80023ea:	eb1a 0303 	adds.w	r3, sl, r3
 80023ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023f2:	464b      	mov	r3, r9
 80023f4:	eb4b 0303 	adc.w	r3, fp, r3
 80023f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800240c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002410:	460b      	mov	r3, r1
 8002412:	18db      	adds	r3, r3, r3
 8002414:	643b      	str	r3, [r7, #64]	; 0x40
 8002416:	4613      	mov	r3, r2
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
 800241e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002426:	f7fd fefb 	bl	8000220 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4611      	mov	r1, r2
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <UART_SetConfig+0x2d4>)
 8002432:	fba3 2301 	umull	r2, r3, r3, r1
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2264      	movs	r2, #100	; 0x64
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	1acb      	subs	r3, r1, r3
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <UART_SetConfig+0x2d4>)
 8002448:	fba3 2302 	umull	r2, r3, r3, r2
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002454:	441c      	add	r4, r3
 8002456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002468:	4642      	mov	r2, r8
 800246a:	464b      	mov	r3, r9
 800246c:	1891      	adds	r1, r2, r2
 800246e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002470:	415b      	adcs	r3, r3
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	4641      	mov	r1, r8
 800247a:	1851      	adds	r1, r2, r1
 800247c:	6339      	str	r1, [r7, #48]	; 0x30
 800247e:	4649      	mov	r1, r9
 8002480:	414b      	adcs	r3, r1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002490:	4659      	mov	r1, fp
 8002492:	00cb      	lsls	r3, r1, #3
 8002494:	4651      	mov	r1, sl
 8002496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249a:	4651      	mov	r1, sl
 800249c:	00ca      	lsls	r2, r1, #3
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	4642      	mov	r2, r8
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024ac:	464b      	mov	r3, r9
 80024ae:	460a      	mov	r2, r1
 80024b0:	eb42 0303 	adc.w	r3, r2, r3
 80024b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024cc:	460b      	mov	r3, r1
 80024ce:	18db      	adds	r3, r3, r3
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d2:	4613      	mov	r3, r2
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024e2:	f7fd fe9d 	bl	8000220 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <UART_SetConfig+0x2d4>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	2164      	movs	r1, #100	; 0x64
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	3332      	adds	r3, #50	; 0x32
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <UART_SetConfig+0x2d4>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	f003 0207 	and.w	r2, r3, #7
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4422      	add	r2, r4
 8002512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002514:	e105      	b.n	8002722 <UART_SetConfig+0x4d6>
 8002516:	bf00      	nop
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002528:	2200      	movs	r2, #0
 800252a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800252e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002536:	4642      	mov	r2, r8
 8002538:	464b      	mov	r3, r9
 800253a:	1891      	adds	r1, r2, r2
 800253c:	6239      	str	r1, [r7, #32]
 800253e:	415b      	adcs	r3, r3
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002546:	4641      	mov	r1, r8
 8002548:	1854      	adds	r4, r2, r1
 800254a:	4649      	mov	r1, r9
 800254c:	eb43 0501 	adc.w	r5, r3, r1
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	00eb      	lsls	r3, r5, #3
 800255a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255e:	00e2      	lsls	r2, r4, #3
 8002560:	4614      	mov	r4, r2
 8002562:	461d      	mov	r5, r3
 8002564:	4643      	mov	r3, r8
 8002566:	18e3      	adds	r3, r4, r3
 8002568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800256c:	464b      	mov	r3, r9
 800256e:	eb45 0303 	adc.w	r3, r5, r3
 8002572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002592:	4629      	mov	r1, r5
 8002594:	008b      	lsls	r3, r1, #2
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800259c:	4621      	mov	r1, r4
 800259e:	008a      	lsls	r2, r1, #2
 80025a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025a4:	f7fd fe3c 	bl	8000220 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4b60      	ldr	r3, [pc, #384]	; (8002730 <UART_SetConfig+0x4e4>)
 80025ae:	fba3 2302 	umull	r2, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	011c      	lsls	r4, r3, #4
 80025b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	61b9      	str	r1, [r7, #24]
 80025d0:	415b      	adcs	r3, r3
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d8:	4641      	mov	r1, r8
 80025da:	1851      	adds	r1, r2, r1
 80025dc:	6139      	str	r1, [r7, #16]
 80025de:	4649      	mov	r1, r9
 80025e0:	414b      	adcs	r3, r1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f0:	4659      	mov	r1, fp
 80025f2:	00cb      	lsls	r3, r1, #3
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fa:	4651      	mov	r1, sl
 80025fc:	00ca      	lsls	r2, r1, #3
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4603      	mov	r3, r0
 8002604:	4642      	mov	r2, r8
 8002606:	189b      	adds	r3, r3, r2
 8002608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800260c:	464b      	mov	r3, r9
 800260e:	460a      	mov	r2, r1
 8002610:	eb42 0303 	adc.w	r3, r2, r3
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	67bb      	str	r3, [r7, #120]	; 0x78
 8002622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002630:	4649      	mov	r1, r9
 8002632:	008b      	lsls	r3, r1, #2
 8002634:	4641      	mov	r1, r8
 8002636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800263a:	4641      	mov	r1, r8
 800263c:	008a      	lsls	r2, r1, #2
 800263e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002642:	f7fd fded 	bl	8000220 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <UART_SetConfig+0x4e4>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	2164      	movs	r1, #100	; 0x64
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	3332      	adds	r3, #50	; 0x32
 800265e:	4a34      	ldr	r2, [pc, #208]	; (8002730 <UART_SetConfig+0x4e4>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266a:	441c      	add	r4, r3
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	2200      	movs	r2, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	677a      	str	r2, [r7, #116]	; 0x74
 8002676:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800267a:	4642      	mov	r2, r8
 800267c:	464b      	mov	r3, r9
 800267e:	1891      	adds	r1, r2, r2
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	415b      	adcs	r3, r3
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800268a:	4641      	mov	r1, r8
 800268c:	1851      	adds	r1, r2, r1
 800268e:	6039      	str	r1, [r7, #0]
 8002690:	4649      	mov	r1, r9
 8002692:	414b      	adcs	r3, r1
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026a2:	4659      	mov	r1, fp
 80026a4:	00cb      	lsls	r3, r1, #3
 80026a6:	4651      	mov	r1, sl
 80026a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ac:	4651      	mov	r1, sl
 80026ae:	00ca      	lsls	r2, r1, #3
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	4642      	mov	r2, r8
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80026bc:	464b      	mov	r3, r9
 80026be:	460a      	mov	r2, r1
 80026c0:	eb42 0303 	adc.w	r3, r2, r3
 80026c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	663b      	str	r3, [r7, #96]	; 0x60
 80026d0:	667a      	str	r2, [r7, #100]	; 0x64
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026de:	4649      	mov	r1, r9
 80026e0:	008b      	lsls	r3, r1, #2
 80026e2:	4641      	mov	r1, r8
 80026e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e8:	4641      	mov	r1, r8
 80026ea:	008a      	lsls	r2, r1, #2
 80026ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026f0:	f7fd fd96 	bl	8000220 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <UART_SetConfig+0x4e4>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <UART_SetConfig+0x4e4>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4422      	add	r2, r4
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	51eb851f 	.word	0x51eb851f

08002734 <__errno>:
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <__errno+0x8>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000018 	.word	0x20000018

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4d0d      	ldr	r5, [pc, #52]	; (8002778 <__libc_init_array+0x38>)
 8002744:	4c0d      	ldr	r4, [pc, #52]	; (800277c <__libc_init_array+0x3c>)
 8002746:	1b64      	subs	r4, r4, r5
 8002748:	10a4      	asrs	r4, r4, #2
 800274a:	2600      	movs	r6, #0
 800274c:	42a6      	cmp	r6, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	4d0b      	ldr	r5, [pc, #44]	; (8002780 <__libc_init_array+0x40>)
 8002752:	4c0c      	ldr	r4, [pc, #48]	; (8002784 <__libc_init_array+0x44>)
 8002754:	f000 fd1e 	bl	8003194 <_init>
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	2600      	movs	r6, #0
 800275e:	42a6      	cmp	r6, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	f855 3b04 	ldr.w	r3, [r5], #4
 8002768:	4798      	blx	r3
 800276a:	3601      	adds	r6, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002772:	4798      	blx	r3
 8002774:	3601      	adds	r6, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	08003278 	.word	0x08003278
 800277c:	08003278 	.word	0x08003278
 8002780:	08003278 	.word	0x08003278
 8002784:	0800327c 	.word	0x0800327c

08002788 <memset>:
 8002788:	4402      	add	r2, r0
 800278a:	4603      	mov	r3, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	f803 1b01 	strb.w	r1, [r3], #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <_puts_r>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	460e      	mov	r6, r1
 800279c:	4605      	mov	r5, r0
 800279e:	b118      	cbz	r0, 80027a8 <_puts_r+0x10>
 80027a0:	6983      	ldr	r3, [r0, #24]
 80027a2:	b90b      	cbnz	r3, 80027a8 <_puts_r+0x10>
 80027a4:	f000 fa48 	bl	8002c38 <__sinit>
 80027a8:	69ab      	ldr	r3, [r5, #24]
 80027aa:	68ac      	ldr	r4, [r5, #8]
 80027ac:	b913      	cbnz	r3, 80027b4 <_puts_r+0x1c>
 80027ae:	4628      	mov	r0, r5
 80027b0:	f000 fa42 	bl	8002c38 <__sinit>
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <_puts_r+0xd0>)
 80027b6:	429c      	cmp	r4, r3
 80027b8:	d120      	bne.n	80027fc <_puts_r+0x64>
 80027ba:	686c      	ldr	r4, [r5, #4]
 80027bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027be:	07db      	lsls	r3, r3, #31
 80027c0:	d405      	bmi.n	80027ce <_puts_r+0x36>
 80027c2:	89a3      	ldrh	r3, [r4, #12]
 80027c4:	0598      	lsls	r0, r3, #22
 80027c6:	d402      	bmi.n	80027ce <_puts_r+0x36>
 80027c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ca:	f000 fad3 	bl	8002d74 <__retarget_lock_acquire_recursive>
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	0719      	lsls	r1, r3, #28
 80027d2:	d51d      	bpl.n	8002810 <_puts_r+0x78>
 80027d4:	6923      	ldr	r3, [r4, #16]
 80027d6:	b1db      	cbz	r3, 8002810 <_puts_r+0x78>
 80027d8:	3e01      	subs	r6, #1
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60a3      	str	r3, [r4, #8]
 80027e4:	bb39      	cbnz	r1, 8002836 <_puts_r+0x9e>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da38      	bge.n	800285c <_puts_r+0xc4>
 80027ea:	4622      	mov	r2, r4
 80027ec:	210a      	movs	r1, #10
 80027ee:	4628      	mov	r0, r5
 80027f0:	f000 f848 	bl	8002884 <__swbuf_r>
 80027f4:	3001      	adds	r0, #1
 80027f6:	d011      	beq.n	800281c <_puts_r+0x84>
 80027f8:	250a      	movs	r5, #10
 80027fa:	e011      	b.n	8002820 <_puts_r+0x88>
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <_puts_r+0xd4>)
 80027fe:	429c      	cmp	r4, r3
 8002800:	d101      	bne.n	8002806 <_puts_r+0x6e>
 8002802:	68ac      	ldr	r4, [r5, #8]
 8002804:	e7da      	b.n	80027bc <_puts_r+0x24>
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <_puts_r+0xd8>)
 8002808:	429c      	cmp	r4, r3
 800280a:	bf08      	it	eq
 800280c:	68ec      	ldreq	r4, [r5, #12]
 800280e:	e7d5      	b.n	80027bc <_puts_r+0x24>
 8002810:	4621      	mov	r1, r4
 8002812:	4628      	mov	r0, r5
 8002814:	f000 f888 	bl	8002928 <__swsetup_r>
 8002818:	2800      	cmp	r0, #0
 800281a:	d0dd      	beq.n	80027d8 <_puts_r+0x40>
 800281c:	f04f 35ff 	mov.w	r5, #4294967295
 8002820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002822:	07da      	lsls	r2, r3, #31
 8002824:	d405      	bmi.n	8002832 <_puts_r+0x9a>
 8002826:	89a3      	ldrh	r3, [r4, #12]
 8002828:	059b      	lsls	r3, r3, #22
 800282a:	d402      	bmi.n	8002832 <_puts_r+0x9a>
 800282c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800282e:	f000 faa2 	bl	8002d76 <__retarget_lock_release_recursive>
 8002832:	4628      	mov	r0, r5
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	2b00      	cmp	r3, #0
 8002838:	da04      	bge.n	8002844 <_puts_r+0xac>
 800283a:	69a2      	ldr	r2, [r4, #24]
 800283c:	429a      	cmp	r2, r3
 800283e:	dc06      	bgt.n	800284e <_puts_r+0xb6>
 8002840:	290a      	cmp	r1, #10
 8002842:	d004      	beq.n	800284e <_puts_r+0xb6>
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	6022      	str	r2, [r4, #0]
 800284a:	7019      	strb	r1, [r3, #0]
 800284c:	e7c5      	b.n	80027da <_puts_r+0x42>
 800284e:	4622      	mov	r2, r4
 8002850:	4628      	mov	r0, r5
 8002852:	f000 f817 	bl	8002884 <__swbuf_r>
 8002856:	3001      	adds	r0, #1
 8002858:	d1bf      	bne.n	80027da <_puts_r+0x42>
 800285a:	e7df      	b.n	800281c <_puts_r+0x84>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	250a      	movs	r5, #10
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	6022      	str	r2, [r4, #0]
 8002864:	701d      	strb	r5, [r3, #0]
 8002866:	e7db      	b.n	8002820 <_puts_r+0x88>
 8002868:	08003230 	.word	0x08003230
 800286c:	08003250 	.word	0x08003250
 8002870:	08003210 	.word	0x08003210

08002874 <puts>:
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <puts+0xc>)
 8002876:	4601      	mov	r1, r0
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	f7ff bf8d 	b.w	8002798 <_puts_r>
 800287e:	bf00      	nop
 8002880:	20000018 	.word	0x20000018

08002884 <__swbuf_r>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	460e      	mov	r6, r1
 8002888:	4614      	mov	r4, r2
 800288a:	4605      	mov	r5, r0
 800288c:	b118      	cbz	r0, 8002896 <__swbuf_r+0x12>
 800288e:	6983      	ldr	r3, [r0, #24]
 8002890:	b90b      	cbnz	r3, 8002896 <__swbuf_r+0x12>
 8002892:	f000 f9d1 	bl	8002c38 <__sinit>
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <__swbuf_r+0x98>)
 8002898:	429c      	cmp	r4, r3
 800289a:	d12b      	bne.n	80028f4 <__swbuf_r+0x70>
 800289c:	686c      	ldr	r4, [r5, #4]
 800289e:	69a3      	ldr	r3, [r4, #24]
 80028a0:	60a3      	str	r3, [r4, #8]
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	071a      	lsls	r2, r3, #28
 80028a6:	d52f      	bpl.n	8002908 <__swbuf_r+0x84>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	b36b      	cbz	r3, 8002908 <__swbuf_r+0x84>
 80028ac:	6923      	ldr	r3, [r4, #16]
 80028ae:	6820      	ldr	r0, [r4, #0]
 80028b0:	1ac0      	subs	r0, r0, r3
 80028b2:	6963      	ldr	r3, [r4, #20]
 80028b4:	b2f6      	uxtb	r6, r6
 80028b6:	4283      	cmp	r3, r0
 80028b8:	4637      	mov	r7, r6
 80028ba:	dc04      	bgt.n	80028c6 <__swbuf_r+0x42>
 80028bc:	4621      	mov	r1, r4
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 f926 	bl	8002b10 <_fflush_r>
 80028c4:	bb30      	cbnz	r0, 8002914 <__swbuf_r+0x90>
 80028c6:	68a3      	ldr	r3, [r4, #8]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60a3      	str	r3, [r4, #8]
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	6022      	str	r2, [r4, #0]
 80028d2:	701e      	strb	r6, [r3, #0]
 80028d4:	6963      	ldr	r3, [r4, #20]
 80028d6:	3001      	adds	r0, #1
 80028d8:	4283      	cmp	r3, r0
 80028da:	d004      	beq.n	80028e6 <__swbuf_r+0x62>
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	07db      	lsls	r3, r3, #31
 80028e0:	d506      	bpl.n	80028f0 <__swbuf_r+0x6c>
 80028e2:	2e0a      	cmp	r6, #10
 80028e4:	d104      	bne.n	80028f0 <__swbuf_r+0x6c>
 80028e6:	4621      	mov	r1, r4
 80028e8:	4628      	mov	r0, r5
 80028ea:	f000 f911 	bl	8002b10 <_fflush_r>
 80028ee:	b988      	cbnz	r0, 8002914 <__swbuf_r+0x90>
 80028f0:	4638      	mov	r0, r7
 80028f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <__swbuf_r+0x9c>)
 80028f6:	429c      	cmp	r4, r3
 80028f8:	d101      	bne.n	80028fe <__swbuf_r+0x7a>
 80028fa:	68ac      	ldr	r4, [r5, #8]
 80028fc:	e7cf      	b.n	800289e <__swbuf_r+0x1a>
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <__swbuf_r+0xa0>)
 8002900:	429c      	cmp	r4, r3
 8002902:	bf08      	it	eq
 8002904:	68ec      	ldreq	r4, [r5, #12]
 8002906:	e7ca      	b.n	800289e <__swbuf_r+0x1a>
 8002908:	4621      	mov	r1, r4
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f80c 	bl	8002928 <__swsetup_r>
 8002910:	2800      	cmp	r0, #0
 8002912:	d0cb      	beq.n	80028ac <__swbuf_r+0x28>
 8002914:	f04f 37ff 	mov.w	r7, #4294967295
 8002918:	e7ea      	b.n	80028f0 <__swbuf_r+0x6c>
 800291a:	bf00      	nop
 800291c:	08003230 	.word	0x08003230
 8002920:	08003250 	.word	0x08003250
 8002924:	08003210 	.word	0x08003210

08002928 <__swsetup_r>:
 8002928:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <__swsetup_r+0xcc>)
 800292a:	b570      	push	{r4, r5, r6, lr}
 800292c:	681d      	ldr	r5, [r3, #0]
 800292e:	4606      	mov	r6, r0
 8002930:	460c      	mov	r4, r1
 8002932:	b125      	cbz	r5, 800293e <__swsetup_r+0x16>
 8002934:	69ab      	ldr	r3, [r5, #24]
 8002936:	b913      	cbnz	r3, 800293e <__swsetup_r+0x16>
 8002938:	4628      	mov	r0, r5
 800293a:	f000 f97d 	bl	8002c38 <__sinit>
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <__swsetup_r+0xd0>)
 8002940:	429c      	cmp	r4, r3
 8002942:	d10f      	bne.n	8002964 <__swsetup_r+0x3c>
 8002944:	686c      	ldr	r4, [r5, #4]
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800294c:	0719      	lsls	r1, r3, #28
 800294e:	d42c      	bmi.n	80029aa <__swsetup_r+0x82>
 8002950:	06dd      	lsls	r5, r3, #27
 8002952:	d411      	bmi.n	8002978 <__swsetup_r+0x50>
 8002954:	2309      	movs	r3, #9
 8002956:	6033      	str	r3, [r6, #0]
 8002958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	f04f 30ff 	mov.w	r0, #4294967295
 8002962:	e03e      	b.n	80029e2 <__swsetup_r+0xba>
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <__swsetup_r+0xd4>)
 8002966:	429c      	cmp	r4, r3
 8002968:	d101      	bne.n	800296e <__swsetup_r+0x46>
 800296a:	68ac      	ldr	r4, [r5, #8]
 800296c:	e7eb      	b.n	8002946 <__swsetup_r+0x1e>
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <__swsetup_r+0xd8>)
 8002970:	429c      	cmp	r4, r3
 8002972:	bf08      	it	eq
 8002974:	68ec      	ldreq	r4, [r5, #12]
 8002976:	e7e6      	b.n	8002946 <__swsetup_r+0x1e>
 8002978:	0758      	lsls	r0, r3, #29
 800297a:	d512      	bpl.n	80029a2 <__swsetup_r+0x7a>
 800297c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800297e:	b141      	cbz	r1, 8002992 <__swsetup_r+0x6a>
 8002980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002984:	4299      	cmp	r1, r3
 8002986:	d002      	beq.n	800298e <__swsetup_r+0x66>
 8002988:	4630      	mov	r0, r6
 800298a:	f000 fa5b 	bl	8002e44 <_free_r>
 800298e:	2300      	movs	r3, #0
 8002990:	6363      	str	r3, [r4, #52]	; 0x34
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	2300      	movs	r3, #0
 800299c:	6063      	str	r3, [r4, #4]
 800299e:	6923      	ldr	r3, [r4, #16]
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	b94b      	cbnz	r3, 80029c2 <__swsetup_r+0x9a>
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d003      	beq.n	80029c2 <__swsetup_r+0x9a>
 80029ba:	4621      	mov	r1, r4
 80029bc:	4630      	mov	r0, r6
 80029be:	f000 fa01 	bl	8002dc4 <__smakebuf_r>
 80029c2:	89a0      	ldrh	r0, [r4, #12]
 80029c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029c8:	f010 0301 	ands.w	r3, r0, #1
 80029cc:	d00a      	beq.n	80029e4 <__swsetup_r+0xbc>
 80029ce:	2300      	movs	r3, #0
 80029d0:	60a3      	str	r3, [r4, #8]
 80029d2:	6963      	ldr	r3, [r4, #20]
 80029d4:	425b      	negs	r3, r3
 80029d6:	61a3      	str	r3, [r4, #24]
 80029d8:	6923      	ldr	r3, [r4, #16]
 80029da:	b943      	cbnz	r3, 80029ee <__swsetup_r+0xc6>
 80029dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029e0:	d1ba      	bne.n	8002958 <__swsetup_r+0x30>
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	0781      	lsls	r1, r0, #30
 80029e6:	bf58      	it	pl
 80029e8:	6963      	ldrpl	r3, [r4, #20]
 80029ea:	60a3      	str	r3, [r4, #8]
 80029ec:	e7f4      	b.n	80029d8 <__swsetup_r+0xb0>
 80029ee:	2000      	movs	r0, #0
 80029f0:	e7f7      	b.n	80029e2 <__swsetup_r+0xba>
 80029f2:	bf00      	nop
 80029f4:	20000018 	.word	0x20000018
 80029f8:	08003230 	.word	0x08003230
 80029fc:	08003250 	.word	0x08003250
 8002a00:	08003210 	.word	0x08003210

08002a04 <__sflush_r>:
 8002a04:	898a      	ldrh	r2, [r1, #12]
 8002a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	0710      	lsls	r0, r2, #28
 8002a0e:	460c      	mov	r4, r1
 8002a10:	d458      	bmi.n	8002ac4 <__sflush_r+0xc0>
 8002a12:	684b      	ldr	r3, [r1, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dc05      	bgt.n	8002a24 <__sflush_r+0x20>
 8002a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	dc02      	bgt.n	8002a24 <__sflush_r+0x20>
 8002a1e:	2000      	movs	r0, #0
 8002a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d0f9      	beq.n	8002a1e <__sflush_r+0x1a>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a30:	682f      	ldr	r7, [r5, #0]
 8002a32:	602b      	str	r3, [r5, #0]
 8002a34:	d032      	beq.n	8002a9c <__sflush_r+0x98>
 8002a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a38:	89a3      	ldrh	r3, [r4, #12]
 8002a3a:	075a      	lsls	r2, r3, #29
 8002a3c:	d505      	bpl.n	8002a4a <__sflush_r+0x46>
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	1ac0      	subs	r0, r0, r3
 8002a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a44:	b10b      	cbz	r3, 8002a4a <__sflush_r+0x46>
 8002a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a48:	1ac0      	subs	r0, r0, r3
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a50:	6a21      	ldr	r1, [r4, #32]
 8002a52:	4628      	mov	r0, r5
 8002a54:	47b0      	blx	r6
 8002a56:	1c43      	adds	r3, r0, #1
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	d106      	bne.n	8002a6a <__sflush_r+0x66>
 8002a5c:	6829      	ldr	r1, [r5, #0]
 8002a5e:	291d      	cmp	r1, #29
 8002a60:	d82c      	bhi.n	8002abc <__sflush_r+0xb8>
 8002a62:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <__sflush_r+0x108>)
 8002a64:	40ca      	lsrs	r2, r1
 8002a66:	07d6      	lsls	r6, r2, #31
 8002a68:	d528      	bpl.n	8002abc <__sflush_r+0xb8>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	6062      	str	r2, [r4, #4]
 8002a6e:	04d9      	lsls	r1, r3, #19
 8002a70:	6922      	ldr	r2, [r4, #16]
 8002a72:	6022      	str	r2, [r4, #0]
 8002a74:	d504      	bpl.n	8002a80 <__sflush_r+0x7c>
 8002a76:	1c42      	adds	r2, r0, #1
 8002a78:	d101      	bne.n	8002a7e <__sflush_r+0x7a>
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	b903      	cbnz	r3, 8002a80 <__sflush_r+0x7c>
 8002a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8002a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a82:	602f      	str	r7, [r5, #0]
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d0ca      	beq.n	8002a1e <__sflush_r+0x1a>
 8002a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <__sflush_r+0x92>
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f9d7 	bl	8002e44 <_free_r>
 8002a96:	2000      	movs	r0, #0
 8002a98:	6360      	str	r0, [r4, #52]	; 0x34
 8002a9a:	e7c1      	b.n	8002a20 <__sflush_r+0x1c>
 8002a9c:	6a21      	ldr	r1, [r4, #32]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	47b0      	blx	r6
 8002aa4:	1c41      	adds	r1, r0, #1
 8002aa6:	d1c7      	bne.n	8002a38 <__sflush_r+0x34>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0c4      	beq.n	8002a38 <__sflush_r+0x34>
 8002aae:	2b1d      	cmp	r3, #29
 8002ab0:	d001      	beq.n	8002ab6 <__sflush_r+0xb2>
 8002ab2:	2b16      	cmp	r3, #22
 8002ab4:	d101      	bne.n	8002aba <__sflush_r+0xb6>
 8002ab6:	602f      	str	r7, [r5, #0]
 8002ab8:	e7b1      	b.n	8002a1e <__sflush_r+0x1a>
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac0:	81a3      	strh	r3, [r4, #12]
 8002ac2:	e7ad      	b.n	8002a20 <__sflush_r+0x1c>
 8002ac4:	690f      	ldr	r7, [r1, #16]
 8002ac6:	2f00      	cmp	r7, #0
 8002ac8:	d0a9      	beq.n	8002a1e <__sflush_r+0x1a>
 8002aca:	0793      	lsls	r3, r2, #30
 8002acc:	680e      	ldr	r6, [r1, #0]
 8002ace:	bf08      	it	eq
 8002ad0:	694b      	ldreq	r3, [r1, #20]
 8002ad2:	600f      	str	r7, [r1, #0]
 8002ad4:	bf18      	it	ne
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	eba6 0807 	sub.w	r8, r6, r7
 8002adc:	608b      	str	r3, [r1, #8]
 8002ade:	f1b8 0f00 	cmp.w	r8, #0
 8002ae2:	dd9c      	ble.n	8002a1e <__sflush_r+0x1a>
 8002ae4:	6a21      	ldr	r1, [r4, #32]
 8002ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ae8:	4643      	mov	r3, r8
 8002aea:	463a      	mov	r2, r7
 8002aec:	4628      	mov	r0, r5
 8002aee:	47b0      	blx	r6
 8002af0:	2800      	cmp	r0, #0
 8002af2:	dc06      	bgt.n	8002b02 <__sflush_r+0xfe>
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	81a3      	strh	r3, [r4, #12]
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	e78e      	b.n	8002a20 <__sflush_r+0x1c>
 8002b02:	4407      	add	r7, r0
 8002b04:	eba8 0800 	sub.w	r8, r8, r0
 8002b08:	e7e9      	b.n	8002ade <__sflush_r+0xda>
 8002b0a:	bf00      	nop
 8002b0c:	20400001 	.word	0x20400001

08002b10 <_fflush_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	690b      	ldr	r3, [r1, #16]
 8002b14:	4605      	mov	r5, r0
 8002b16:	460c      	mov	r4, r1
 8002b18:	b913      	cbnz	r3, 8002b20 <_fflush_r+0x10>
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	b118      	cbz	r0, 8002b2a <_fflush_r+0x1a>
 8002b22:	6983      	ldr	r3, [r0, #24]
 8002b24:	b90b      	cbnz	r3, 8002b2a <_fflush_r+0x1a>
 8002b26:	f000 f887 	bl	8002c38 <__sinit>
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <_fflush_r+0x6c>)
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	d11b      	bne.n	8002b68 <_fflush_r+0x58>
 8002b30:	686c      	ldr	r4, [r5, #4]
 8002b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ef      	beq.n	8002b1a <_fflush_r+0xa>
 8002b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b3c:	07d0      	lsls	r0, r2, #31
 8002b3e:	d404      	bmi.n	8002b4a <_fflush_r+0x3a>
 8002b40:	0599      	lsls	r1, r3, #22
 8002b42:	d402      	bmi.n	8002b4a <_fflush_r+0x3a>
 8002b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b46:	f000 f915 	bl	8002d74 <__retarget_lock_acquire_recursive>
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	f7ff ff59 	bl	8002a04 <__sflush_r>
 8002b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b54:	07da      	lsls	r2, r3, #31
 8002b56:	4605      	mov	r5, r0
 8002b58:	d4e0      	bmi.n	8002b1c <_fflush_r+0xc>
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	059b      	lsls	r3, r3, #22
 8002b5e:	d4dd      	bmi.n	8002b1c <_fflush_r+0xc>
 8002b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b62:	f000 f908 	bl	8002d76 <__retarget_lock_release_recursive>
 8002b66:	e7d9      	b.n	8002b1c <_fflush_r+0xc>
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <_fflush_r+0x70>)
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d101      	bne.n	8002b72 <_fflush_r+0x62>
 8002b6e:	68ac      	ldr	r4, [r5, #8]
 8002b70:	e7df      	b.n	8002b32 <_fflush_r+0x22>
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <_fflush_r+0x74>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	bf08      	it	eq
 8002b78:	68ec      	ldreq	r4, [r5, #12]
 8002b7a:	e7da      	b.n	8002b32 <_fflush_r+0x22>
 8002b7c:	08003230 	.word	0x08003230
 8002b80:	08003250 	.word	0x08003250
 8002b84:	08003210 	.word	0x08003210

08002b88 <std>:
 8002b88:	2300      	movs	r3, #0
 8002b8a:	b510      	push	{r4, lr}
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b96:	6083      	str	r3, [r0, #8]
 8002b98:	8181      	strh	r1, [r0, #12]
 8002b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8002b9c:	81c2      	strh	r2, [r0, #14]
 8002b9e:	6183      	str	r3, [r0, #24]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	305c      	adds	r0, #92	; 0x5c
 8002ba6:	f7ff fdef 	bl	8002788 <memset>
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <std+0x38>)
 8002bac:	6263      	str	r3, [r4, #36]	; 0x24
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <std+0x3c>)
 8002bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <std+0x40>)
 8002bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <std+0x44>)
 8002bb8:	6224      	str	r4, [r4, #32]
 8002bba:	6323      	str	r3, [r4, #48]	; 0x30
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08003025 	.word	0x08003025
 8002bc4:	08003047 	.word	0x08003047
 8002bc8:	0800307f 	.word	0x0800307f
 8002bcc:	080030a3 	.word	0x080030a3

08002bd0 <_cleanup_r>:
 8002bd0:	4901      	ldr	r1, [pc, #4]	; (8002bd8 <_cleanup_r+0x8>)
 8002bd2:	f000 b8af 	b.w	8002d34 <_fwalk_reent>
 8002bd6:	bf00      	nop
 8002bd8:	08002b11 	.word	0x08002b11

08002bdc <__sfmoreglue>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	2268      	movs	r2, #104	; 0x68
 8002be0:	1e4d      	subs	r5, r1, #1
 8002be2:	4355      	muls	r5, r2
 8002be4:	460e      	mov	r6, r1
 8002be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bea:	f000 f997 	bl	8002f1c <_malloc_r>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	b140      	cbz	r0, 8002c04 <__sfmoreglue+0x28>
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8002bf8:	300c      	adds	r0, #12
 8002bfa:	60a0      	str	r0, [r4, #8]
 8002bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c00:	f7ff fdc2 	bl	8002788 <memset>
 8002c04:	4620      	mov	r0, r4
 8002c06:	bd70      	pop	{r4, r5, r6, pc}

08002c08 <__sfp_lock_acquire>:
 8002c08:	4801      	ldr	r0, [pc, #4]	; (8002c10 <__sfp_lock_acquire+0x8>)
 8002c0a:	f000 b8b3 	b.w	8002d74 <__retarget_lock_acquire_recursive>
 8002c0e:	bf00      	nop
 8002c10:	20000259 	.word	0x20000259

08002c14 <__sfp_lock_release>:
 8002c14:	4801      	ldr	r0, [pc, #4]	; (8002c1c <__sfp_lock_release+0x8>)
 8002c16:	f000 b8ae 	b.w	8002d76 <__retarget_lock_release_recursive>
 8002c1a:	bf00      	nop
 8002c1c:	20000259 	.word	0x20000259

08002c20 <__sinit_lock_acquire>:
 8002c20:	4801      	ldr	r0, [pc, #4]	; (8002c28 <__sinit_lock_acquire+0x8>)
 8002c22:	f000 b8a7 	b.w	8002d74 <__retarget_lock_acquire_recursive>
 8002c26:	bf00      	nop
 8002c28:	2000025a 	.word	0x2000025a

08002c2c <__sinit_lock_release>:
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <__sinit_lock_release+0x8>)
 8002c2e:	f000 b8a2 	b.w	8002d76 <__retarget_lock_release_recursive>
 8002c32:	bf00      	nop
 8002c34:	2000025a 	.word	0x2000025a

08002c38 <__sinit>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	f7ff fff0 	bl	8002c20 <__sinit_lock_acquire>
 8002c40:	69a3      	ldr	r3, [r4, #24]
 8002c42:	b11b      	cbz	r3, 8002c4c <__sinit+0x14>
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	f7ff bff0 	b.w	8002c2c <__sinit_lock_release>
 8002c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c50:	6523      	str	r3, [r4, #80]	; 0x50
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <__sinit+0x68>)
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <__sinit+0x6c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c5a:	42a3      	cmp	r3, r4
 8002c5c:	bf04      	itt	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	61a3      	streq	r3, [r4, #24]
 8002c62:	4620      	mov	r0, r4
 8002c64:	f000 f820 	bl	8002ca8 <__sfp>
 8002c68:	6060      	str	r0, [r4, #4]
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 f81c 	bl	8002ca8 <__sfp>
 8002c70:	60a0      	str	r0, [r4, #8]
 8002c72:	4620      	mov	r0, r4
 8002c74:	f000 f818 	bl	8002ca8 <__sfp>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60e0      	str	r0, [r4, #12]
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	6860      	ldr	r0, [r4, #4]
 8002c80:	f7ff ff82 	bl	8002b88 <std>
 8002c84:	68a0      	ldr	r0, [r4, #8]
 8002c86:	2201      	movs	r2, #1
 8002c88:	2109      	movs	r1, #9
 8002c8a:	f7ff ff7d 	bl	8002b88 <std>
 8002c8e:	68e0      	ldr	r0, [r4, #12]
 8002c90:	2202      	movs	r2, #2
 8002c92:	2112      	movs	r1, #18
 8002c94:	f7ff ff78 	bl	8002b88 <std>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61a3      	str	r3, [r4, #24]
 8002c9c:	e7d2      	b.n	8002c44 <__sinit+0xc>
 8002c9e:	bf00      	nop
 8002ca0:	0800320c 	.word	0x0800320c
 8002ca4:	08002bd1 	.word	0x08002bd1

08002ca8 <__sfp>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	4607      	mov	r7, r0
 8002cac:	f7ff ffac 	bl	8002c08 <__sfp_lock_acquire>
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <__sfp+0x84>)
 8002cb2:	681e      	ldr	r6, [r3, #0]
 8002cb4:	69b3      	ldr	r3, [r6, #24]
 8002cb6:	b913      	cbnz	r3, 8002cbe <__sfp+0x16>
 8002cb8:	4630      	mov	r0, r6
 8002cba:	f7ff ffbd 	bl	8002c38 <__sinit>
 8002cbe:	3648      	adds	r6, #72	; 0x48
 8002cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	d503      	bpl.n	8002cd0 <__sfp+0x28>
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	b30b      	cbz	r3, 8002d10 <__sfp+0x68>
 8002ccc:	6836      	ldr	r6, [r6, #0]
 8002cce:	e7f7      	b.n	8002cc0 <__sfp+0x18>
 8002cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cd4:	b9d5      	cbnz	r5, 8002d0c <__sfp+0x64>
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <__sfp+0x88>)
 8002cd8:	60e3      	str	r3, [r4, #12]
 8002cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002cde:	6665      	str	r5, [r4, #100]	; 0x64
 8002ce0:	f000 f847 	bl	8002d72 <__retarget_lock_init_recursive>
 8002ce4:	f7ff ff96 	bl	8002c14 <__sfp_lock_release>
 8002ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002cf0:	6025      	str	r5, [r4, #0]
 8002cf2:	61a5      	str	r5, [r4, #24]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002cfc:	f7ff fd44 	bl	8002788 <memset>
 8002d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d08:	4620      	mov	r0, r4
 8002d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0c:	3468      	adds	r4, #104	; 0x68
 8002d0e:	e7d9      	b.n	8002cc4 <__sfp+0x1c>
 8002d10:	2104      	movs	r1, #4
 8002d12:	4638      	mov	r0, r7
 8002d14:	f7ff ff62 	bl	8002bdc <__sfmoreglue>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	6030      	str	r0, [r6, #0]
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d1d5      	bne.n	8002ccc <__sfp+0x24>
 8002d20:	f7ff ff78 	bl	8002c14 <__sfp_lock_release>
 8002d24:	230c      	movs	r3, #12
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	e7ee      	b.n	8002d08 <__sfp+0x60>
 8002d2a:	bf00      	nop
 8002d2c:	0800320c 	.word	0x0800320c
 8002d30:	ffff0001 	.word	0xffff0001

08002d34 <_fwalk_reent>:
 8002d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d38:	4606      	mov	r6, r0
 8002d3a:	4688      	mov	r8, r1
 8002d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d40:	2700      	movs	r7, #0
 8002d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d46:	f1b9 0901 	subs.w	r9, r9, #1
 8002d4a:	d505      	bpl.n	8002d58 <_fwalk_reent+0x24>
 8002d4c:	6824      	ldr	r4, [r4, #0]
 8002d4e:	2c00      	cmp	r4, #0
 8002d50:	d1f7      	bne.n	8002d42 <_fwalk_reent+0xe>
 8002d52:	4638      	mov	r0, r7
 8002d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d58:	89ab      	ldrh	r3, [r5, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d907      	bls.n	8002d6e <_fwalk_reent+0x3a>
 8002d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d62:	3301      	adds	r3, #1
 8002d64:	d003      	beq.n	8002d6e <_fwalk_reent+0x3a>
 8002d66:	4629      	mov	r1, r5
 8002d68:	4630      	mov	r0, r6
 8002d6a:	47c0      	blx	r8
 8002d6c:	4307      	orrs	r7, r0
 8002d6e:	3568      	adds	r5, #104	; 0x68
 8002d70:	e7e9      	b.n	8002d46 <_fwalk_reent+0x12>

08002d72 <__retarget_lock_init_recursive>:
 8002d72:	4770      	bx	lr

08002d74 <__retarget_lock_acquire_recursive>:
 8002d74:	4770      	bx	lr

08002d76 <__retarget_lock_release_recursive>:
 8002d76:	4770      	bx	lr

08002d78 <__swhatbuf_r>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	460e      	mov	r6, r1
 8002d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d80:	2900      	cmp	r1, #0
 8002d82:	b096      	sub	sp, #88	; 0x58
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	da08      	bge.n	8002d9c <__swhatbuf_r+0x24>
 8002d8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	602a      	str	r2, [r5, #0]
 8002d92:	061a      	lsls	r2, r3, #24
 8002d94:	d410      	bmi.n	8002db8 <__swhatbuf_r+0x40>
 8002d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9a:	e00e      	b.n	8002dba <__swhatbuf_r+0x42>
 8002d9c:	466a      	mov	r2, sp
 8002d9e:	f000 f9a7 	bl	80030f0 <_fstat_r>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	dbf1      	blt.n	8002d8a <__swhatbuf_r+0x12>
 8002da6:	9a01      	ldr	r2, [sp, #4]
 8002da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002db0:	425a      	negs	r2, r3
 8002db2:	415a      	adcs	r2, r3
 8002db4:	602a      	str	r2, [r5, #0]
 8002db6:	e7ee      	b.n	8002d96 <__swhatbuf_r+0x1e>
 8002db8:	2340      	movs	r3, #64	; 0x40
 8002dba:	2000      	movs	r0, #0
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	b016      	add	sp, #88	; 0x58
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dc4 <__smakebuf_r>:
 8002dc4:	898b      	ldrh	r3, [r1, #12]
 8002dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dc8:	079d      	lsls	r5, r3, #30
 8002dca:	4606      	mov	r6, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	d507      	bpl.n	8002de0 <__smakebuf_r+0x1c>
 8002dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	6163      	str	r3, [r4, #20]
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
 8002de0:	ab01      	add	r3, sp, #4
 8002de2:	466a      	mov	r2, sp
 8002de4:	f7ff ffc8 	bl	8002d78 <__swhatbuf_r>
 8002de8:	9900      	ldr	r1, [sp, #0]
 8002dea:	4605      	mov	r5, r0
 8002dec:	4630      	mov	r0, r6
 8002dee:	f000 f895 	bl	8002f1c <_malloc_r>
 8002df2:	b948      	cbnz	r0, 8002e08 <__smakebuf_r+0x44>
 8002df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df8:	059a      	lsls	r2, r3, #22
 8002dfa:	d4ef      	bmi.n	8002ddc <__smakebuf_r+0x18>
 8002dfc:	f023 0303 	bic.w	r3, r3, #3
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	e7e3      	b.n	8002dd0 <__smakebuf_r+0xc>
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <__smakebuf_r+0x7c>)
 8002e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	6020      	str	r0, [r4, #0]
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	81a3      	strh	r3, [r4, #12]
 8002e16:	9b00      	ldr	r3, [sp, #0]
 8002e18:	6163      	str	r3, [r4, #20]
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	6120      	str	r0, [r4, #16]
 8002e1e:	b15b      	cbz	r3, 8002e38 <__smakebuf_r+0x74>
 8002e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 f975 	bl	8003114 <_isatty_r>
 8002e2a:	b128      	cbz	r0, 8002e38 <__smakebuf_r+0x74>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	81a3      	strh	r3, [r4, #12]
 8002e38:	89a0      	ldrh	r0, [r4, #12]
 8002e3a:	4305      	orrs	r5, r0
 8002e3c:	81a5      	strh	r5, [r4, #12]
 8002e3e:	e7cd      	b.n	8002ddc <__smakebuf_r+0x18>
 8002e40:	08002bd1 	.word	0x08002bd1

08002e44 <_free_r>:
 8002e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e46:	2900      	cmp	r1, #0
 8002e48:	d044      	beq.n	8002ed4 <_free_r+0x90>
 8002e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e4e:	9001      	str	r0, [sp, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f1a1 0404 	sub.w	r4, r1, #4
 8002e56:	bfb8      	it	lt
 8002e58:	18e4      	addlt	r4, r4, r3
 8002e5a:	f000 f97d 	bl	8003158 <__malloc_lock>
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <_free_r+0x94>)
 8002e60:	9801      	ldr	r0, [sp, #4]
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	b933      	cbnz	r3, 8002e74 <_free_r+0x30>
 8002e66:	6063      	str	r3, [r4, #4]
 8002e68:	6014      	str	r4, [r2, #0]
 8002e6a:	b003      	add	sp, #12
 8002e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e70:	f000 b978 	b.w	8003164 <__malloc_unlock>
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	d908      	bls.n	8002e8a <_free_r+0x46>
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	1961      	adds	r1, r4, r5
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	bf01      	itttt	eq
 8002e80:	6819      	ldreq	r1, [r3, #0]
 8002e82:	685b      	ldreq	r3, [r3, #4]
 8002e84:	1949      	addeq	r1, r1, r5
 8002e86:	6021      	streq	r1, [r4, #0]
 8002e88:	e7ed      	b.n	8002e66 <_free_r+0x22>
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b10b      	cbz	r3, 8002e94 <_free_r+0x50>
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	d9fa      	bls.n	8002e8a <_free_r+0x46>
 8002e94:	6811      	ldr	r1, [r2, #0]
 8002e96:	1855      	adds	r5, r2, r1
 8002e98:	42a5      	cmp	r5, r4
 8002e9a:	d10b      	bne.n	8002eb4 <_free_r+0x70>
 8002e9c:	6824      	ldr	r4, [r4, #0]
 8002e9e:	4421      	add	r1, r4
 8002ea0:	1854      	adds	r4, r2, r1
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	d1e0      	bne.n	8002e6a <_free_r+0x26>
 8002ea8:	681c      	ldr	r4, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	6053      	str	r3, [r2, #4]
 8002eae:	4421      	add	r1, r4
 8002eb0:	6011      	str	r1, [r2, #0]
 8002eb2:	e7da      	b.n	8002e6a <_free_r+0x26>
 8002eb4:	d902      	bls.n	8002ebc <_free_r+0x78>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	6003      	str	r3, [r0, #0]
 8002eba:	e7d6      	b.n	8002e6a <_free_r+0x26>
 8002ebc:	6825      	ldr	r5, [r4, #0]
 8002ebe:	1961      	adds	r1, r4, r5
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	bf04      	itt	eq
 8002ec4:	6819      	ldreq	r1, [r3, #0]
 8002ec6:	685b      	ldreq	r3, [r3, #4]
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	bf04      	itt	eq
 8002ecc:	1949      	addeq	r1, r1, r5
 8002ece:	6021      	streq	r1, [r4, #0]
 8002ed0:	6054      	str	r4, [r2, #4]
 8002ed2:	e7ca      	b.n	8002e6a <_free_r+0x26>
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd30      	pop	{r4, r5, pc}
 8002ed8:	2000025c 	.word	0x2000025c

08002edc <sbrk_aligned>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	4e0e      	ldr	r6, [pc, #56]	; (8002f18 <sbrk_aligned+0x3c>)
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	6831      	ldr	r1, [r6, #0]
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	b911      	cbnz	r1, 8002eee <sbrk_aligned+0x12>
 8002ee8:	f000 f88c 	bl	8003004 <_sbrk_r>
 8002eec:	6030      	str	r0, [r6, #0]
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f887 	bl	8003004 <_sbrk_r>
 8002ef6:	1c43      	adds	r3, r0, #1
 8002ef8:	d00a      	beq.n	8002f10 <sbrk_aligned+0x34>
 8002efa:	1cc4      	adds	r4, r0, #3
 8002efc:	f024 0403 	bic.w	r4, r4, #3
 8002f00:	42a0      	cmp	r0, r4
 8002f02:	d007      	beq.n	8002f14 <sbrk_aligned+0x38>
 8002f04:	1a21      	subs	r1, r4, r0
 8002f06:	4628      	mov	r0, r5
 8002f08:	f000 f87c 	bl	8003004 <_sbrk_r>
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d101      	bne.n	8002f14 <sbrk_aligned+0x38>
 8002f10:	f04f 34ff 	mov.w	r4, #4294967295
 8002f14:	4620      	mov	r0, r4
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	20000260 	.word	0x20000260

08002f1c <_malloc_r>:
 8002f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f20:	1ccd      	adds	r5, r1, #3
 8002f22:	f025 0503 	bic.w	r5, r5, #3
 8002f26:	3508      	adds	r5, #8
 8002f28:	2d0c      	cmp	r5, #12
 8002f2a:	bf38      	it	cc
 8002f2c:	250c      	movcc	r5, #12
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	4607      	mov	r7, r0
 8002f32:	db01      	blt.n	8002f38 <_malloc_r+0x1c>
 8002f34:	42a9      	cmp	r1, r5
 8002f36:	d905      	bls.n	8002f44 <_malloc_r+0x28>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	4630      	mov	r0, r6
 8002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f44:	4e2e      	ldr	r6, [pc, #184]	; (8003000 <_malloc_r+0xe4>)
 8002f46:	f000 f907 	bl	8003158 <__malloc_lock>
 8002f4a:	6833      	ldr	r3, [r6, #0]
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	bb34      	cbnz	r4, 8002f9e <_malloc_r+0x82>
 8002f50:	4629      	mov	r1, r5
 8002f52:	4638      	mov	r0, r7
 8002f54:	f7ff ffc2 	bl	8002edc <sbrk_aligned>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	d14d      	bne.n	8002ffa <_malloc_r+0xde>
 8002f5e:	6834      	ldr	r4, [r6, #0]
 8002f60:	4626      	mov	r6, r4
 8002f62:	2e00      	cmp	r6, #0
 8002f64:	d140      	bne.n	8002fe8 <_malloc_r+0xcc>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	eb04 0803 	add.w	r8, r4, r3
 8002f70:	f000 f848 	bl	8003004 <_sbrk_r>
 8002f74:	4580      	cmp	r8, r0
 8002f76:	d13a      	bne.n	8002fee <_malloc_r+0xd2>
 8002f78:	6821      	ldr	r1, [r4, #0]
 8002f7a:	3503      	adds	r5, #3
 8002f7c:	1a6d      	subs	r5, r5, r1
 8002f7e:	f025 0503 	bic.w	r5, r5, #3
 8002f82:	3508      	adds	r5, #8
 8002f84:	2d0c      	cmp	r5, #12
 8002f86:	bf38      	it	cc
 8002f88:	250c      	movcc	r5, #12
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	f7ff ffa5 	bl	8002edc <sbrk_aligned>
 8002f92:	3001      	adds	r0, #1
 8002f94:	d02b      	beq.n	8002fee <_malloc_r+0xd2>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	442b      	add	r3, r5
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	e00e      	b.n	8002fbc <_malloc_r+0xa0>
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	1b52      	subs	r2, r2, r5
 8002fa2:	d41e      	bmi.n	8002fe2 <_malloc_r+0xc6>
 8002fa4:	2a0b      	cmp	r2, #11
 8002fa6:	d916      	bls.n	8002fd6 <_malloc_r+0xba>
 8002fa8:	1961      	adds	r1, r4, r5
 8002faa:	42a3      	cmp	r3, r4
 8002fac:	6025      	str	r5, [r4, #0]
 8002fae:	bf18      	it	ne
 8002fb0:	6059      	strne	r1, [r3, #4]
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	bf08      	it	eq
 8002fb6:	6031      	streq	r1, [r6, #0]
 8002fb8:	5162      	str	r2, [r4, r5]
 8002fba:	604b      	str	r3, [r1, #4]
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	f104 060b 	add.w	r6, r4, #11
 8002fc2:	f000 f8cf 	bl	8003164 <__malloc_unlock>
 8002fc6:	f026 0607 	bic.w	r6, r6, #7
 8002fca:	1d23      	adds	r3, r4, #4
 8002fcc:	1af2      	subs	r2, r6, r3
 8002fce:	d0b6      	beq.n	8002f3e <_malloc_r+0x22>
 8002fd0:	1b9b      	subs	r3, r3, r6
 8002fd2:	50a3      	str	r3, [r4, r2]
 8002fd4:	e7b3      	b.n	8002f3e <_malloc_r+0x22>
 8002fd6:	6862      	ldr	r2, [r4, #4]
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	bf0c      	ite	eq
 8002fdc:	6032      	streq	r2, [r6, #0]
 8002fde:	605a      	strne	r2, [r3, #4]
 8002fe0:	e7ec      	b.n	8002fbc <_malloc_r+0xa0>
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	6864      	ldr	r4, [r4, #4]
 8002fe6:	e7b2      	b.n	8002f4e <_malloc_r+0x32>
 8002fe8:	4634      	mov	r4, r6
 8002fea:	6876      	ldr	r6, [r6, #4]
 8002fec:	e7b9      	b.n	8002f62 <_malloc_r+0x46>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	f000 f8b6 	bl	8003164 <__malloc_unlock>
 8002ff8:	e7a1      	b.n	8002f3e <_malloc_r+0x22>
 8002ffa:	6025      	str	r5, [r4, #0]
 8002ffc:	e7de      	b.n	8002fbc <_malloc_r+0xa0>
 8002ffe:	bf00      	nop
 8003000:	2000025c 	.word	0x2000025c

08003004 <_sbrk_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4d06      	ldr	r5, [pc, #24]	; (8003020 <_sbrk_r+0x1c>)
 8003008:	2300      	movs	r3, #0
 800300a:	4604      	mov	r4, r0
 800300c:	4608      	mov	r0, r1
 800300e:	602b      	str	r3, [r5, #0]
 8003010:	f7fd ffce 	bl	8000fb0 <_sbrk>
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	d102      	bne.n	800301e <_sbrk_r+0x1a>
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	b103      	cbz	r3, 800301e <_sbrk_r+0x1a>
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	bd38      	pop	{r3, r4, r5, pc}
 8003020:	20000264 	.word	0x20000264

08003024 <__sread>:
 8003024:	b510      	push	{r4, lr}
 8003026:	460c      	mov	r4, r1
 8003028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800302c:	f000 f8a0 	bl	8003170 <_read_r>
 8003030:	2800      	cmp	r0, #0
 8003032:	bfab      	itete	ge
 8003034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003036:	89a3      	ldrhlt	r3, [r4, #12]
 8003038:	181b      	addge	r3, r3, r0
 800303a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800303e:	bfac      	ite	ge
 8003040:	6563      	strge	r3, [r4, #84]	; 0x54
 8003042:	81a3      	strhlt	r3, [r4, #12]
 8003044:	bd10      	pop	{r4, pc}

08003046 <__swrite>:
 8003046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304a:	461f      	mov	r7, r3
 800304c:	898b      	ldrh	r3, [r1, #12]
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	4605      	mov	r5, r0
 8003052:	460c      	mov	r4, r1
 8003054:	4616      	mov	r6, r2
 8003056:	d505      	bpl.n	8003064 <__swrite+0x1e>
 8003058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305c:	2302      	movs	r3, #2
 800305e:	2200      	movs	r2, #0
 8003060:	f000 f868 	bl	8003134 <_lseek_r>
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306e:	81a3      	strh	r3, [r4, #12]
 8003070:	4632      	mov	r2, r6
 8003072:	463b      	mov	r3, r7
 8003074:	4628      	mov	r0, r5
 8003076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800307a:	f000 b817 	b.w	80030ac <_write_r>

0800307e <__sseek>:
 800307e:	b510      	push	{r4, lr}
 8003080:	460c      	mov	r4, r1
 8003082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003086:	f000 f855 	bl	8003134 <_lseek_r>
 800308a:	1c43      	adds	r3, r0, #1
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	bf15      	itete	ne
 8003090:	6560      	strne	r0, [r4, #84]	; 0x54
 8003092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800309a:	81a3      	strheq	r3, [r4, #12]
 800309c:	bf18      	it	ne
 800309e:	81a3      	strhne	r3, [r4, #12]
 80030a0:	bd10      	pop	{r4, pc}

080030a2 <__sclose>:
 80030a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a6:	f000 b813 	b.w	80030d0 <_close_r>
	...

080030ac <_write_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d07      	ldr	r5, [pc, #28]	; (80030cc <_write_r+0x20>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7fd ff27 	bl	8000f0e <_write>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_write_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_write_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	20000264 	.word	0x20000264

080030d0 <_close_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d06      	ldr	r5, [pc, #24]	; (80030ec <_close_r+0x1c>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	f7fd ff33 	bl	8000f46 <_close>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_close_r+0x1a>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_close_r+0x1a>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20000264 	.word	0x20000264

080030f0 <_fstat_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d07      	ldr	r5, [pc, #28]	; (8003110 <_fstat_r+0x20>)
 80030f4:	2300      	movs	r3, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f7fd ff2e 	bl	8000f5e <_fstat>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d102      	bne.n	800310c <_fstat_r+0x1c>
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	b103      	cbz	r3, 800310c <_fstat_r+0x1c>
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	bf00      	nop
 8003110:	20000264 	.word	0x20000264

08003114 <_isatty_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4d06      	ldr	r5, [pc, #24]	; (8003130 <_isatty_r+0x1c>)
 8003118:	2300      	movs	r3, #0
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd ff2d 	bl	8000f7e <_isatty>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_isatty_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_isatty_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000264 	.word	0x20000264

08003134 <_lseek_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4d07      	ldr	r5, [pc, #28]	; (8003154 <_lseek_r+0x20>)
 8003138:	4604      	mov	r4, r0
 800313a:	4608      	mov	r0, r1
 800313c:	4611      	mov	r1, r2
 800313e:	2200      	movs	r2, #0
 8003140:	602a      	str	r2, [r5, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f7fd ff26 	bl	8000f94 <_lseek>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_lseek_r+0x1e>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_lseek_r+0x1e>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000264 	.word	0x20000264

08003158 <__malloc_lock>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__malloc_lock+0x8>)
 800315a:	f7ff be0b 	b.w	8002d74 <__retarget_lock_acquire_recursive>
 800315e:	bf00      	nop
 8003160:	20000258 	.word	0x20000258

08003164 <__malloc_unlock>:
 8003164:	4801      	ldr	r0, [pc, #4]	; (800316c <__malloc_unlock+0x8>)
 8003166:	f7ff be06 	b.w	8002d76 <__retarget_lock_release_recursive>
 800316a:	bf00      	nop
 800316c:	20000258 	.word	0x20000258

08003170 <_read_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	; (8003190 <_read_r+0x20>)
 8003174:	4604      	mov	r4, r0
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	2200      	movs	r2, #0
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fea8 	bl	8000ed4 <_read>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_read_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_read_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000264 	.word	0x20000264

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
